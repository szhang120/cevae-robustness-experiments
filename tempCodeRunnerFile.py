#!/usr/bin/env python3
"""
This script reads the evaluation log file (evaluation_twins.txt) generated by main.py,
parses the evaluation metrics for each experiment—distinguishing between unshifted 
("Train shifted = False") and shifted ("Train shifted = True") conditions—and produces 
four plots:
  1. Unshifted: Absolute ATE Error vs. p
  2. Unshifted: PEHE vs. p
  3. Shifted: Absolute ATE Error vs. p
  4. Shifted: PEHE vs. p

For each experiment, the True ATE (test) is parsed (e.g. “True ATE (test): -0.025459098”)
and used to compute the ATE_Abs_Error for the IPW baseline:
    ATE_Abs_Error(IPW) = |(IPW CV (ATE)) - (True ATE (test))|

The x-axis is the flipping probability p (from 0.0 to 0.5). For fairness, the y-axis in 
each pair of plots is scaled identically (using the overall maximum value across both shifted 
and unshifted experiments). All plots are saved in a folder named “evaluation_plots.”
"""

import re
import os
import matplotlib.pyplot as plt
import numpy as np

def parse_evaluation_file(filename):
    """
    Parses the evaluation log file and returns a nested dictionary structured as:
    
    results[shift_state][p] = {
         "true_ate": <value>,  (the True ATE (test) for that experiment)
         "CEVAE": {"ATE_Abs_Error": value, "PEHE": value},
         "baseline": {
             model_name: {"ATE_Abs_Error": value, "PEHE": value},
             ...
         }
    }
    
    It distinguishes sections based on lines such as:
         --- Train shifted = True ---
    and experiment blocks starting with:
         *** Experiment: flipping probability p = X ***
    
    For the True ATE (test), a line of the form
         True ATE (test): -0.025459098
    is parsed.
    
    For baseline models:
      - If the model is IPW, then its ATE value (printed after “IPW CV (ATE) for Twins:”) is 
        used together with the current True ATE to compute ATE_Abs_Error = abs(predicted ATE - true_ate).
      - Otherwise, if the line already contains “ATE_Abs_Error=...” then that value is used.
    """
    results = {"False": {}, "True": {}}
    current_shift = None
    current_p = None
    current_true_ate = None

    # Regular expressions.
    shift_re = re.compile(r"^--- Train shifted = (True|False) ---")
    exp_re = re.compile(r"^\*\*\* Experiment: flipping probability p = ([\d\.]+) \*\*\*")
    true_ate_re = re.compile(r"^True ATE \(test\):\s*([-\d\.]+)")
    cevae_re = re.compile(r"CEVAE Test CV \(Twins\):\s*(\{[^}]+\})")
    baseline_re = re.compile(r"^(IPW|DML|X-Learner|SVM|KNN|Interacted LR|XGBoost) CV \(Twins\):\s*(.+)$")
    
    with open(filename, "r") as f:
        for line in f:
            line = line.strip()
            # Detect shift header.
            shift_match = shift_re.match(line)
            if shift_match:
                current_shift = shift_match.group(1)
                continue
            # Detect experiment header.
            exp_match = exp_re.match(line)
            if exp_match:
                current_p = float(exp_match.group(1))
                # Initialize experiment dictionary.
                results[current_shift][current_p] = {"CEVAE": {}, "baseline": {}}
                current_true_ate = None  # reset true_ate for this experiment
                continue
            # Detect True ATE (test) line.
            true_ate_match = true_ate_re.match(line)
            if true_ate_match:
                current_true_ate = float(true_ate_match.group(1))
                # Save it in the current experiment.
                if current_p is not None:
                    results[current_shift][current_p]["true_ate"] = current_true_ate
                continue
            # Process CEVAE result line.
            cevae_match = cevae_re.search(line)
            if cevae_match and current_p is not None:
                try:
                    cevae_dict = eval(cevae_match.group(1))
                except Exception as e:
                    print(f"Error evaluating CEVAE dict: {e}")
                    cevae_dict = {}
                results[current_shift][current_p]["CEVAE"]["ATE_Abs_Error"] = cevae_dict.get("ATE_Abs_Error_mean", np.nan)
                results[current_shift][current_p]["CEVAE"]["PEHE"] = cevae_dict.get("PEHE_mean", np.nan)
                continue
            # Process baseline result line.
            base_match = baseline_re.match(line)
            if base_match and current_p is not None:
                model_name = base_match.group(1)
                metrics_str = base_match.group(2)
                # For IPW, we need to compute ATE_Abs_Error using the true_ate.
                if model_name == "IPW":
                    try:
                        predicted_ate = float(metrics_str)
                    except:
                        predicted_ate = np.nan
                    if current_true_ate is not None:
                        ate_abs_error = abs(predicted_ate - current_true_ate)
                    else:
                        ate_abs_error = np.nan
                else:
                    if "ATE_Abs_Error=" in metrics_str:
                        abs_match = re
